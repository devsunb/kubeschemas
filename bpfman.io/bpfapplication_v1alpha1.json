{
  "description": "BpfApplication is the Schema for the bpfapplications API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "bpfman.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "BpfApplication"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "BpfApplicationSpec defines the desired state of BpfApplication",
      "properties": {
        "bytecode": {
          "description": "Bytecode configures where the bpf program's bytecode should be loaded\nfrom.",
          "properties": {
            "image": {
              "description": "Image used to specify a bytecode container image.",
              "properties": {
                "imagepullpolicy": {
                  "default": "IfNotPresent",
                  "description": "PullPolicy describes a policy for if/when to pull a bytecode image. Defaults to IfNotPresent.",
                  "enum": [
                    "Always",
                    "Never",
                    "IfNotPresent"
                  ],
                  "type": "string"
                },
                "imagepullsecret": {
                  "description": "ImagePullSecret is the name of the secret bpfman should use to get remote image\nrepository secrets.",
                  "properties": {
                    "name": {
                      "description": "Name of the secret which contains the credentials to access the image repository.",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Namespace of the secret which contains the credentials to access the image repository.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "namespace"
                  ],
                  "type": "object"
                },
                "url": {
                  "description": "Valid container image URL used to reference a remote bytecode image.",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            },
            "path": {
              "description": "Path is used to specify a bytecode object via filepath.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "globaldata": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "GlobalData allows the user to set global variables when the program is loaded\nwith an array of raw bytes. This is a very low level primitive. The caller\nis responsible for formatting the byte string appropriately considering\nsuch things as size, endianness, alignment and packing of data structures.",
          "type": "object"
        },
        "nodeselector": {
          "description": "NodeSelector allows the user to specify which nodes to deploy the\nbpf program to. This field must be specified, to select all nodes\nuse standard metav1.LabelSelector semantics and make it empty.",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "programs": {
          "description": "Programs is a list of bpf programs supported for a specific application.\nIt's possible that the application can selectively choose which program(s)\nto run from this list.",
          "items": {
            "description": "BpfApplicationProgram defines the desired state of BpfApplication",
            "properties": {
              "fentry": {
                "description": "fentry defines the desired state of the application's FentryPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "func_name": {
                    "description": "Function to attach the fentry to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "func_name"
                ],
                "type": "object"
              },
              "fexit": {
                "description": "fexit defines the desired state of the application's FexitPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "func_name": {
                    "description": "Function to attach the fexit to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "func_name"
                ],
                "type": "object"
              },
              "kprobe": {
                "description": "kprobe defines the desired state of the application's KprobePrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "func_name": {
                    "description": "Functions to attach the kprobe to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "offset": {
                    "default": 0,
                    "description": "Offset added to the address of the function for kprobe.\nNot allowed for kretprobes.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "retprobe": {
                    "default": false,
                    "description": "Whether the program is a kretprobe.  Default is false",
                    "type": "boolean"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "func_name"
                ],
                "type": "object"
              },
              "kretprobe": {
                "description": "kretprobe defines the desired state of the application's KretprobePrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "func_name": {
                    "description": "Functions to attach the kprobe to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "offset": {
                    "default": 0,
                    "description": "Offset added to the address of the function for kprobe.\nNot allowed for kretprobes.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "retprobe": {
                    "default": false,
                    "description": "Whether the program is a kretprobe.  Default is false",
                    "type": "boolean"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "func_name"
                ],
                "type": "object"
              },
              "tc": {
                "description": "tc defines the desired state of the application's TcPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "direction": {
                    "description": "Direction specifies the direction of traffic the tc program should\nattach to for a given network device.",
                    "enum": [
                      "ingress",
                      "egress"
                    ],
                    "type": "string"
                  },
                  "interfaceselector": {
                    "description": "Selector to determine the network interface (or interfaces)",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "interfaces": {
                        "description": "Interfaces refers to a list of network interfaces to attach the BPF\nprogram to.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "primarynodeinterface": {
                        "description": "Attach BPF program to the primary interface on the node. Only 'true' accepted.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "priority": {
                    "description": "Priority specifies the priority of the tc program in relation to\nother programs of the same type with the same attach point. It is a value\nfrom 0 to 1000 where lower values have higher precedence.",
                    "format": "int32",
                    "maximum": 1000,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "proceedon": {
                    "default": [
                      "pipe",
                      "dispatcher_return"
                    ],
                    "description": "ProceedOn allows the user to call other tc programs in chain on this exit code.\nMultiple values are supported by repeating the parameter.",
                    "items": {
                      "enum": [
                        "unspec",
                        "ok",
                        "reclassify",
                        "shot",
                        "pipe",
                        "stolen",
                        "queued",
                        "repeat",
                        "redirect",
                        "trap",
                        "dispatcher_return"
                      ],
                      "type": "string"
                    },
                    "maxItems": 11,
                    "type": "array"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "direction",
                  "interfaceselector",
                  "priority"
                ],
                "type": "object"
              },
              "tcx": {
                "description": "tcx defines the desired state of the application's TcxPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "direction": {
                    "description": "Direction specifies the direction of traffic the tcx program should\nattach to for a given network device.",
                    "enum": [
                      "ingress",
                      "egress"
                    ],
                    "type": "string"
                  },
                  "interfaceselector": {
                    "description": "Selector to determine the network interface (or interfaces)",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "interfaces": {
                        "description": "Interfaces refers to a list of network interfaces to attach the BPF\nprogram to.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "primarynodeinterface": {
                        "description": "Attach BPF program to the primary interface on the node. Only 'true' accepted.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "priority": {
                    "description": "Priority specifies the priority of the tc program in relation to\nother programs of the same type with the same attach point. It is a value\nfrom 0 to 1000 where lower values have higher precedence.",
                    "format": "int32",
                    "maximum": 1000,
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "direction",
                  "interfaceselector",
                  "priority"
                ],
                "type": "object"
              },
              "tracepoint": {
                "description": "tracepoint defines the desired state of the application's TracepointPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "names": {
                    "description": "Names refers to the names of kernel tracepoints to attach the\nbpf program to.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "names"
                ],
                "type": "object"
              },
              "type": {
                "description": "Type specifies the bpf program type",
                "enum": [
                  "XDP",
                  "TC",
                  "TCX",
                  "Fentry",
                  "Fexit",
                  "Kprobe",
                  "Kretprobe",
                  "Uprobe",
                  "Uretprobe",
                  "Tracepoint"
                ],
                "type": "string"
              },
              "uprobe": {
                "description": "uprobe defines the desired state of the application's UprobePrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "containers": {
                    "description": "Containers identifes the set of containers in which to attach the uprobe.\nIf Containers is not specified, the uprobe will be attached in the\nbpfman-agent container.  The ContainerSelector is very flexible and even\nallows the selection of all containers in a cluster.  If an attempt is\nmade to attach uprobes to too many containers, it can have a negative\nimpact on on the cluster.",
                    "properties": {
                      "containernames": {
                        "description": "Name(s) of container(s).  If none are specified, all containers in the\npod are selected.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "namespace": {
                        "default": "",
                        "description": "Target namespaces.",
                        "type": "string"
                      },
                      "pods": {
                        "description": "Target pods. This field must be specified, to select all pods use\nstandard metav1.LabelSelector semantics and make it empty.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "required": [
                      "pods"
                    ],
                    "type": "object"
                  },
                  "func_name": {
                    "description": "Function to attach the uprobe to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "offset": {
                    "default": 0,
                    "description": "Offset added to the address of the function for uprobe.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "pid": {
                    "description": "Only execute uprobe for given process identification number (PID). If PID\nis not provided, uprobe executes for all PIDs.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "retprobe": {
                    "default": false,
                    "description": "Whether the program is a uretprobe.  Default is false",
                    "type": "boolean"
                  },
                  "target": {
                    "description": "Library name or the absolute path to a binary or library.",
                    "type": "string"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "target"
                ],
                "type": "object"
              },
              "uretprobe": {
                "description": "uretprobe defines the desired state of the application's UretprobePrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "containers": {
                    "description": "Containers identifes the set of containers in which to attach the uprobe.\nIf Containers is not specified, the uprobe will be attached in the\nbpfman-agent container.  The ContainerSelector is very flexible and even\nallows the selection of all containers in a cluster.  If an attempt is\nmade to attach uprobes to too many containers, it can have a negative\nimpact on on the cluster.",
                    "properties": {
                      "containernames": {
                        "description": "Name(s) of container(s).  If none are specified, all containers in the\npod are selected.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "namespace": {
                        "default": "",
                        "description": "Target namespaces.",
                        "type": "string"
                      },
                      "pods": {
                        "description": "Target pods. This field must be specified, to select all pods use\nstandard metav1.LabelSelector semantics and make it empty.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "x-kubernetes-list-type": "atomic"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": "object"
                            },
                            "type": "array",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "x-kubernetes-map-type": "atomic"
                      }
                    },
                    "required": [
                      "pods"
                    ],
                    "type": "object"
                  },
                  "func_name": {
                    "description": "Function to attach the uprobe to.",
                    "type": "string"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "offset": {
                    "default": 0,
                    "description": "Offset added to the address of the function for uprobe.",
                    "format": "int64",
                    "type": "integer"
                  },
                  "pid": {
                    "description": "Only execute uprobe for given process identification number (PID). If PID\nis not provided, uprobe executes for all PIDs.",
                    "format": "int32",
                    "type": "integer"
                  },
                  "retprobe": {
                    "default": false,
                    "description": "Whether the program is a uretprobe.  Default is false",
                    "type": "boolean"
                  },
                  "target": {
                    "description": "Library name or the absolute path to a binary or library.",
                    "type": "string"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "target"
                ],
                "type": "object"
              },
              "xdp": {
                "description": "xdp defines the desired state of the application's XdpPrograms.",
                "properties": {
                  "bpffunctionname": {
                    "description": "BpfFunctionName is the name of the function that is the entry point for the BPF\nprogram",
                    "type": "string"
                  },
                  "interfaceselector": {
                    "description": "Selector to determine the network interface (or interfaces)",
                    "maxProperties": 1,
                    "minProperties": 1,
                    "properties": {
                      "interfaces": {
                        "description": "Interfaces refers to a list of network interfaces to attach the BPF\nprogram to.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "primarynodeinterface": {
                        "description": "Attach BPF program to the primary interface on the node. Only 'true' accepted.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "mapownerselector": {
                    "description": "MapOwnerSelector is used to select the loaded eBPF program this eBPF program\nwill share a map with. The value is a label applied to the BpfProgram to select.\nThe selector must resolve to exactly one instance of a BpfProgram on a given node\nor the eBPF program will not load.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "priority": {
                    "description": "Priority specifies the priority of the bpf program in relation to\nother programs of the same type with the same attach point. It is a value\nfrom 0 to 1000 where lower values have higher precedence.",
                    "format": "int32",
                    "maximum": 1000,
                    "minimum": 0,
                    "type": "integer"
                  },
                  "proceedon": {
                    "default": [
                      "pass",
                      "dispatcher_return"
                    ],
                    "items": {
                      "enum": [
                        "aborted",
                        "drop",
                        "pass",
                        "tx",
                        "redirect",
                        "dispatcher_return"
                      ],
                      "type": "string"
                    },
                    "maxItems": 6,
                    "type": "array"
                  }
                },
                "required": [
                  "bpffunctionname",
                  "interfaceselector",
                  "priority"
                ],
                "type": "object"
              }
            },
            "type": "object",
            "x-kubernetes-validations": [
              {
                "message": "xdp configuration is required when type is XDP, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'XDP' ?  has(self.xdp) : !has(self.xdp)"
              },
              {
                "message": "tc configuration is required when type is TC, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'TC' ?  has(self.tc) : !has(self.tc)"
              },
              {
                "message": "tcx configuration is required when type is TCX, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'TCX' ?  has(self.tcx) : !has(self.tcx)"
              },
              {
                "message": "fentry configuration is required when type is Fentry, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Fentry' ?  has(self.fentry) : !has(self.fentry)"
              },
              {
                "message": "fexit configuration is required when type is Fexit, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Fexit' ?  has(self.fexit) : !has(self.fexit)"
              },
              {
                "message": "kprobe configuration is required when type is Kprobe, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Kprobe' ?  has(self.kprobe) : !has(self.kprobe)"
              },
              {
                "message": "kretprobe configuration is required when type is Kretprobe, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Kretprobe' ?  has(self.kretprobe) : !has(self.kretprobe)"
              },
              {
                "message": "uprobe configuration is required when type is Uprobe, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Uprobe' ?  has(self.uprobe) : !has(self.uprobe)"
              },
              {
                "message": "uretprobe configuration is required when type is Uretprobe, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Uretprobe' ?  has(self.uretprobe) : !has(self.uretprobe)"
              },
              {
                "message": "tracepoint configuration is required when type is Tracepoint, and forbidden otherwise",
                "rule": "has(self.type) \u0026\u0026 self.type == 'Tracepoint' ?  has(self.tracepoint) : !has(self.tracepoint)"
              }
            ]
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "bytecode",
        "nodeselector"
      ],
      "type": "object"
    },
    "status": {
      "description": "BpfApplicationStatus defines the observed state of BpfApplication",
      "properties": {
        "conditions": {
          "description": "Conditions houses the global cluster state for the eBPFProgram. The explicit\ncondition types are defined internally.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "bpfman.io",
      "kind": "BpfApplication",
      "version": "v1alpha1"
    }
  ]
}