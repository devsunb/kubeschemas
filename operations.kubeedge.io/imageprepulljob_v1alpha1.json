{
  "description": "ImagePrePullJob is used to prepull images on edge node.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "operations.kubeedge.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "ImagePrePullJob"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "Spec represents the specification of the desired behavior of ImagePrePullJob.",
      "properties": {
        "imagePrePullTemplate": {
          "description": "ImagePrepullTemplate represents original templates of imagePrePull",
          "properties": {
            "checkItems": {
              "description": "CheckItems specifies the items need to be checked before the task is executed.\nThe default CheckItems value is disk.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "concurrency": {
              "description": "Concurrency specifies the maximum number of edge nodes that can pull images at the same time.\nThe default Concurrency value is 1.",
              "format": "int32",
              "type": "integer"
            },
            "failureTolerate": {
              "description": "FailureTolerate specifies the task tolerance failure ratio.\nThe default FailureTolerate value is 0.1.",
              "type": "string"
            },
            "imageSecrets": {
              "description": "ImageSecret specifies the secret for image pull if private registry used.\nUse {namespace}/{secretName} in format.",
              "type": "string"
            },
            "images": {
              "description": "Images is the image list to be prepull",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "labelSelector": {
              "description": "LabelSelector is a filter to select member clusters by labels.\nIt must match a node's labels for the NodeUpgradeJob to be operated on that node.\nPlease note that sets of NodeNames and LabelSelector are ORed.\nUsers must set one and can only set one.",
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": "object"
                }
              },
              "type": "object",
              "x-kubernetes-map-type": "atomic"
            },
            "nodeNames": {
              "description": "NodeNames is a request to select some specific nodes. If it is non-empty,\nthe upgrade job simply select these edge nodes to do upgrade operation.\nPlease note that sets of NodeNames and LabelSelector are ORed.\nUsers must set one and can only set one.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "retryTimes": {
              "description": "RetryTimes specifies the retry times if image pull failed on each edgenode.\nDefault to 0",
              "format": "int32",
              "type": "integer"
            },
            "timeoutSeconds": {
              "description": "TimeoutSeconds limits the duration of the node prepull job on each edgenode.\nDefault to 300.\nIf set to 0, we'll use the default value 300.",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "status": {
      "description": "Status represents the status of ImagePrePullJob.",
      "properties": {
        "action": {
          "description": "Action represents for the action of the ImagePrePullJob.\nThere are two possible action values: Success, Failure.",
          "type": "string"
        },
        "event": {
          "description": "Event represents for the event of the ImagePrePullJob.\nThere are four possible event values: Init, Check, Pull, TimeOut.",
          "type": "string"
        },
        "reason": {
          "description": "Reason represents for the reason of the ImagePrePullJob.",
          "type": "string"
        },
        "state": {
          "description": "State represents for the state phase of the ImagePrePullJob.\nThere are five possible state values: \"\", checking, pulling, successful, failed.",
          "type": "string"
        },
        "status": {
          "description": "Status contains image prepull status for each edge node.",
          "items": {
            "description": "ImagePrePullStatus stores image prepull status for each edge node.",
            "properties": {
              "imageStatus": {
                "description": "ImageStatus represents the prepull status for each image",
                "items": {
                  "description": "ImageStatus stores the prepull status for each image.",
                  "properties": {
                    "image": {
                      "description": "Image is the name of the image",
                      "type": "string"
                    },
                    "reason": {
                      "description": "Reason represents the fail reason if image pull failed",
                      "type": "string"
                    },
                    "state": {
                      "description": "State represents for the state phase of this image pull on the edge node\nThere are two possible state values: successful, failed.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "nodeStatus": {
                "description": "TaskStatus represents the status for each node",
                "properties": {
                  "action": {
                    "description": "Action represents for the action of the ImagePrePullJob.\nThere are three possible action values: Success, Failure, TimeOut.",
                    "type": "string"
                  },
                  "event": {
                    "description": "Event represents for the event of the ImagePrePullJob.\nThere are three possible event values: Init, Check, Pull.",
                    "type": "string"
                  },
                  "nodeName": {
                    "description": "NodeName is the name of edge node.",
                    "type": "string"
                  },
                  "reason": {
                    "description": "Reason represents for the reason of the ImagePrePullJob.",
                    "type": "string"
                  },
                  "state": {
                    "description": "State represents for the upgrade state phase of the edge node.\nThere are several possible state values: \"\", Upgrading, BackingUp, RollingBack and Checking.",
                    "type": "string"
                  },
                  "time": {
                    "description": "Time represents for the running time of the ImagePrePullJob.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "time": {
          "description": "Time represents for the running time of the ImagePrePullJob.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "operations.kubeedge.io",
      "kind": "ImagePrePullJob",
      "version": "v1alpha1"
    }
  ]
}