{
  "description": "Image is the Schema for the ORC images API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "openstack.k-orc.cloud/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "Image"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "ImageSpec defines the desired state of an Image.",
      "properties": {
        "cloudCredentialsRef": {
          "description": "CloudCredentialsRef points to a secret containing OpenStack credentials",
          "properties": {
            "cloudName": {
              "description": "CloudName specifies the name of the entry in the clouds.yaml file to use.",
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            },
            "secretName": {
              "description": "SecretName is the name of a secret in the same namespace as the resource being provisioned.\nThe secret must contain a key named `clouds.yaml` which contains an OpenStack clouds.yaml file.\nThe secret may optionally contain a key named `cacert` containing a PEM-encoded CA certificate.",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "cloudName",
            "secretName"
          ],
          "type": "object"
        },
        "import": {
          "description": "Import refers to an existing image which will be imported instead of\ncreating a new image.",
          "maxProperties": 1,
          "minProperties": 1,
          "properties": {
            "filter": {
              "description": "Filter contains an image query which is expected to return a single\nresult. The controller will continue to retry if filter returns no\nresults. If filter returns multiple results the controller will set an\nerror state and will not continue to retry.",
              "minProperties": 1,
              "properties": {
                "name": {
                  "description": "Name specifies the name of a Glance image",
                  "maxLength": 1000,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "type": "object"
            },
            "id": {
              "description": "ID contains the unique identifier of an existing Glance image. Note that\nwhen specifying an image import by ID, the image MUST already exist. The\nImage will enter an error state if the image does not exist.",
              "format": "uuid",
              "type": "string"
            }
          },
          "type": "object"
        },
        "managedOptions": {
          "description": "ManagedOptions specifies options which may be applied to managed objects.",
          "properties": {
            "onDelete": {
              "default": "delete",
              "description": "OnDelete specifies the behaviour of the controller when the ORC\nobject is deleted. Options are `delete` - delete the OpenStack resource;\n`detach` - do not delete the OpenStack resource. If not specified, the\ndefault is `delete`.",
              "enum": [
                "delete",
                "detach"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "managementPolicy": {
          "default": "managed",
          "description": "ManagementPolicy defines how ORC will treat the object. Valid values are\n`managed`: ORC will create, update, and delete the resource; `unmanaged`:\nORC will import an existing image, and will not apply updates to it or\ndelete it.",
          "enum": [
            "managed",
            "unmanaged"
          ],
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "managementPolicy is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "resource": {
          "description": "Resource specifies the desired state of the Glance image.\n\nResource may not be specified if the management policy is `unmanaged`.\n\nResource must be specified when the management policy is `managed`.",
          "properties": {
            "content": {
              "description": "Content specifies how to obtain the image content.",
              "properties": {
                "containerFormat": {
                  "default": "bare",
                  "description": "ContainerFormat is the format of the image container.\nqcow2 and raw images do not usually have a container. This is specified as \"bare\", which is also the default.\nPermitted values are ami, ari, aki, bare, ovf, ova, and docker.",
                  "enum": [
                    "ami",
                    "ari",
                    "aki",
                    "bare",
                    "ovf",
                    "ova",
                    "docker"
                  ],
                  "type": "string"
                },
                "diskFormat": {
                  "description": "DiskFormat is the format of the disk image.\nNormal values are \"qcow2\", or \"raw\". Glance may be configured to support others.",
                  "enum": [
                    "ami",
                    "ari",
                    "aki",
                    "vhd",
                    "vhdx",
                    "vmdk",
                    "raw",
                    "qcow2",
                    "vdi",
                    "ploop",
                    "iso"
                  ],
                  "type": "string"
                },
                "download": {
                  "description": "Download describes how to obtain image data by downloading it from a URL.\nMust be set when creating a managed image.",
                  "properties": {
                    "decompress": {
                      "description": "Decompress specifies that the source data must be decompressed with the\ngiven compression algorithm before being stored. Specifying Decompress\nwill disable the use of Glance's web-download, as web-download cannot\ncurrently deterministically decompress downloaded content.",
                      "enum": [
                        "xz",
                        "gz",
                        "bz2"
                      ],
                      "type": "string"
                    },
                    "hash": {
                      "description": "Hash is a hash which will be used to verify downloaded data, i.e.\nbefore any decompression. If not specified, no hash verification will be\nperformed. Specifying a Hash will disable the use of Glance's\nweb-download, as web-download cannot currently deterministically verify\nthe hash of downloaded content.",
                      "properties": {
                        "algorithm": {
                          "description": "Algorithm is the hash algorithm used to generate value.",
                          "enum": [
                            "md5",
                            "sha1",
                            "sha256",
                            "sha512"
                          ],
                          "type": "string"
                        },
                        "value": {
                          "description": "Value is the hash of the image data using Algorithm. It must be hex encoded using lowercase letters.",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[0-9a-f]+$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "algorithm",
                        "value"
                      ],
                      "type": "object",
                      "x-kubernetes-validations": [
                        {
                          "message": "hash is immutable",
                          "rule": "self == oldSelf"
                        }
                      ]
                    },
                    "url": {
                      "description": "URL containing image data",
                      "format": "uri",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "diskFormat",
                "download"
              ],
              "type": "object",
              "x-kubernetes-validations": [
                {
                  "message": "content is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            },
            "name": {
              "description": "Name will be the name of the created Glance image. If not specified, the\nname of the Image object will be used.",
              "maxLength": 1000,
              "minLength": 1,
              "type": "string"
            },
            "properties": {
              "description": "Properties is metadata available to consumers of the image",
              "properties": {
                "hardware": {
                  "description": "Hardware is a set of properties which control the virtual hardware\ncreated by Nova.",
                  "properties": {
                    "cdromBus": {
                      "description": "CDROMBus specifies the type of disk controller to attach CD-ROM devices to.",
                      "enum": [
                        "scsi",
                        "virtio",
                        "uml",
                        "xen",
                        "ide",
                        "usb",
                        "lxc"
                      ],
                      "type": "string"
                    },
                    "cpuCores": {
                      "description": "CPUCores is the preferred number of cores to expose to the guest",
                      "type": "integer"
                    },
                    "cpuPolicy": {
                      "description": "CPUPolicy is used to pin the virtual CPUs (vCPUs) of instances to the\nhost's physical CPU cores (pCPUs). Host aggregates should be used to\nseparate these pinned instances from unpinned instances as the latter\nwill not respect the resourcing requirements of the former.\n\nPermitted values are shared (the default), and dedicated.\n\nshared: The guest vCPUs will be allowed to freely float across host\npCPUs, albeit potentially constrained by NUMA policy.\n\ndedicated: The guest vCPUs will be strictly pinned to a set of host\npCPUs. In the absence of an explicit vCPU topology request, the\ndrivers typically expose all vCPUs as sockets with one core and one\nthread. When strict CPU pinning is in effect the guest CPU topology\nwill be setup to match the topology of the CPUs to which it is\npinned. This option implies an overcommit ratio of 1.0. For example,\nif a two vCPU guest is pinned to a single host core with two threads,\nthen the guest will get a topology of one socket, one core, two\nthreads.",
                      "enum": [
                        "shared",
                        "dedicated"
                      ],
                      "type": "string"
                    },
                    "cpuSockets": {
                      "description": "CPUSockets is the preferred number of sockets to expose to the guest",
                      "type": "integer"
                    },
                    "cpuThreadPolicy": {
                      "description": "CPUThreadPolicy further refines a CPUPolicy of 'dedicated' by stating\nhow hardware CPU threads in a simultaneous multithreading-based (SMT)\narchitecture be used. SMT-based architectures include Intel\nprocessors with Hyper-Threading technology. In these architectures,\nprocessor cores share a number of components with one or more other\ncores. Cores in such architectures are commonly referred to as\nhardware threads, while the cores that a given core share components\nwith are known as thread siblings.\n\nPermitted values are prefer (the default), isolate, and require.\n\nprefer: The host may or may not have an SMT architecture. Where an\nSMT architecture is present, thread siblings are preferred.\n\nisolate: The host must not have an SMT architecture or must emulate a\nnon-SMT architecture. If the host does not have an SMT architecture,\neach vCPU is placed on a different core as expected. If the host does\nhave an SMT architecture - that is, one or more cores have thread\nsiblings - then each vCPU is placed on a different physical core. No\nvCPUs from other guests are placed on the same core. All but one\nthread sibling on each utilized core is therefore guaranteed to be\nunusable.\n\nrequire: The host must have an SMT architecture. Each vCPU is\nallocated on thread siblings. If the host does not have an SMT\narchitecture, then it is not used. If the host has an SMT\narchitecture, but not enough cores with free thread siblings are\navailable, then scheduling fails.",
                      "enum": [
                        "prefer",
                        "isolate",
                        "require"
                      ],
                      "type": "string"
                    },
                    "cpuThreads": {
                      "description": "CPUThreads is the preferred number of threads to expose to the guest",
                      "type": "integer"
                    },
                    "diskBus": {
                      "description": "DiskBus specifies the type of disk controller to attach disk devices to.",
                      "enum": [
                        "scsi",
                        "virtio",
                        "uml",
                        "xen",
                        "ide",
                        "usb",
                        "lxc"
                      ],
                      "type": "string"
                    },
                    "scsiModel": {
                      "description": "SCSIModel enables the use of VirtIO SCSI (virtio-scsi) to provide\nblock device access for compute instances; by default, instances use\nVirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI\ncontroller device that provides improved scalability and performance,\nand supports advanced SCSI hardware.\n\nThe only permitted value is virtio-scsi.",
                      "enum": [
                        "virtio-scsi"
                      ],
                      "type": "string"
                    },
                    "vifModel": {
                      "description": "VIFModel specifies the model of virtual network interface device to use.\n\nPermitted values are e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio,\nand vmxnet3.",
                      "enum": [
                        "e1000",
                        "e1000e",
                        "ne2k_pci",
                        "pcnet",
                        "rtl8139",
                        "virtio",
                        "vmxnet3"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "minDiskGB": {
                  "description": "MinDisk is the minimum amount of disk space in GB that is required to boot the image",
                  "minimum": 1,
                  "type": "integer"
                },
                "minMemoryMB": {
                  "description": "MinMemoryMB is the minimum amount of RAM in MB that is required to boot the image.",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "protected": {
              "description": "Protected specifies that the image is protected from deletion.\nIf not specified, the default is false.",
              "type": "boolean"
            },
            "tags": {
              "description": "Tags is a list of tags which will be applied to the image. A tag has a maximum length of 255 characters.",
              "items": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "set"
            },
            "visibility": {
              "description": "Visibility of the image",
              "enum": [
                "public",
                "private",
                "shared",
                "community"
              ],
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "message": "visibility is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            }
          },
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "name is immutable",
              "rule": "has(self.name) ? self.name == oldSelf.name : !has(oldSelf.name)"
            },
            {
              "message": "name is immutable",
              "rule": "has(self.protected) ? self.protected == oldSelf.protected : !has(oldSelf.protected)"
            },
            {
              "message": "tags is immutable",
              "rule": "has(self.tags) ? self.tags == oldSelf.tags : !has(oldSelf.tags)"
            },
            {
              "message": "visibility is immutable",
              "rule": "has(self.visibility) ? self.visibility == oldSelf.visibility : !has(oldSelf.visibility)"
            },
            {
              "message": "properties is immutable",
              "rule": "has(self.properties) ? self.properties == oldSelf.properties : !has(oldSelf.properties)"
            }
          ]
        }
      },
      "required": [
        "cloudCredentialsRef"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "resource must be specified when policy is managed",
          "rule": "self.managementPolicy == 'managed' ? has(self.resource) : true"
        },
        {
          "message": "import may not be specified when policy is managed",
          "rule": "self.managementPolicy == 'managed' ? !has(self.__import__) : true"
        },
        {
          "message": "resource may not be specified when policy is unmanaged",
          "rule": "self.managementPolicy == 'unmanaged' ? !has(self.resource) : true"
        },
        {
          "message": "import must be specified when policy is unmanaged",
          "rule": "self.managementPolicy == 'unmanaged' ? has(self.__import__) : true"
        },
        {
          "message": "managedOptions may only be provided when policy is managed",
          "rule": "has(self.managedOptions) ? self.managementPolicy == 'managed' : true"
        },
        {
          "message": "resource content must be specified when not importing",
          "rule": "!has(self.__import__) ? has(self.resource.content) : true"
        }
      ]
    },
    "status": {
      "description": "ImageStatus defines the observed state of an Image.",
      "properties": {
        "conditions": {
          "description": "Conditions represents the observed status of the object.\nKnown .status.conditions.type are: \"Available\", \"Progressing\"\n\nAvailable represents the availability of the Glance image. If it is\ntrue then the image is ready for use in Glance, and its hash has been\nverified.\n\nProgressing indicates the state of the Glance image does not currently\nreflect the desired state, but that reconciliation is progressing.\nProgressing will be False either because the desired state has been\nachieved, or some terminal error prevents it from being achieved and the\ncontroller is no longer attempting to reconcile.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "downloadAttempts": {
          "description": "DownloadAttempts is the number of times the controller has attempted to download the image contents",
          "type": "integer"
        },
        "id": {
          "description": "ID is the unique identifier of the Glance image",
          "type": "string"
        },
        "resource": {
          "description": "Resource contains the observed state of the Glance image",
          "properties": {
            "hash": {
              "description": "Hash is the hash of the image data published by Glance. Note that this is\na hash of the data stored internally by Glance, which will have been\ndecompressed and potentially format converted depending on server-side\nconfiguration which is not visible to clients. It is expected that this\nhash will usually differ from the download hash.",
              "properties": {
                "algorithm": {
                  "description": "Algorithm is the hash algorithm used to generate value.",
                  "enum": [
                    "md5",
                    "sha1",
                    "sha256",
                    "sha512"
                  ],
                  "type": "string"
                },
                "value": {
                  "description": "Value is the hash of the image data using Algorithm. It must be hex encoded using lowercase letters.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "pattern": "^[0-9a-f]+$",
                  "type": "string"
                }
              },
              "required": [
                "algorithm",
                "value"
              ],
              "type": "object"
            },
            "sizeB": {
              "description": "SizeB is the size of the image data, in bytes",
              "format": "int64",
              "type": "integer"
            },
            "status": {
              "description": "Status is the image status as reported by Glance",
              "type": "string"
            },
            "virtualSizeB": {
              "description": "VirtualSizeB is the size of the disk the image data represents, in bytes",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "openstack.k-orc.cloud",
      "kind": "Image",
      "version": "v1alpha1"
    }
  ]
}