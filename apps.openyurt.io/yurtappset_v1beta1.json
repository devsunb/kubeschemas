{
  "description": "YurtAppSet is the Schema for the YurtAppSets API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "apps.openyurt.io/v1beta1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "YurtAppSet"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "YurtAppSetSpec defines the desired state of YurtAppSet.",
      "properties": {
        "nodepoolSelector": {
          "description": "NodePoolSelector is a label query over nodepool in which workloads should be deployed in.\nIt must match the nodepool's labels.",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "pools": {
          "description": "Pools is a list of selected nodepools specified with nodepool id in which workloads should be deployed in.\nIt is primarily used for compatibility with v1alpha1 version and NodePoolSelector should be preferred to choose nodepools",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "revisionHistoryLimit": {
          "description": "Indicates the number of histories to be conserved.\nIf unspecified, defaults to 10.",
          "format": "int32",
          "type": "integer"
        },
        "workload": {
          "description": "Workload defines the workload to be deployed in the nodepools",
          "properties": {
            "workloadTemplate": {
              "description": "WorkloadTemplate defines the pool template under the YurtAppSet.",
              "properties": {
                "deploymentTemplate": {
                  "description": "Deployment template",
                  "properties": {
                    "metadata": {
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "spec": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object"
                },
                "statefulSetTemplate": {
                  "description": "StatefulSet template",
                  "properties": {
                    "metadata": {
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "spec": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "workloadTweaks": {
              "description": "WorkloadTemplate defines the customization that will be applied to certain workloads in specified nodepools.",
              "items": {
                "description": "WorkloadTweak Describe detailed multi-region configuration of the subject\nBasicTweaks and AdvancedTweaks describe a set of nodepools and their shared or identical configurations",
                "properties": {
                  "nodepoolSelector": {
                    "description": "NodePoolSelector is a label query over nodepool in which workloads should be adjusted.",
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array",
                              "x-kubernetes-list-type": "atomic"
                            }
                          },
                          "required": [
                            "key",
                            "operator"
                          ],
                          "type": "object"
                        },
                        "type": "array",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "matchLabels": {
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "pools": {
                    "description": "Pools is a list of selected nodepools specified with nodepool id in which workloads should be adjusted.\nPools is not recommended and NodePoolSelector should be preferred",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "tweaks": {
                    "description": "Tweaks is the adjustment can be applied to a certain workload in specified nodepools such as image and replicas",
                    "properties": {
                      "containerImages": {
                        "description": "ContainerImages is a list of container images to be injected to a certain workload",
                        "items": {
                          "description": "ContainerImage specifies the corresponding container and the target image",
                          "properties": {
                            "name": {
                              "description": "Name represents name of the container in which the Image will be replaced",
                              "type": "string"
                            },
                            "targetImage": {
                              "description": "TargetImage represents the image name which is injected into the container above",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "targetImage"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "patches": {
                        "description": "Patches is a list of advanced tweaks to be applied to a certain workload\nIt can add/remove/replace the field values of specified paths in the template.",
                        "items": {
                          "properties": {
                            "operation": {
                              "description": "Operation represents the operation",
                              "enum": [
                                "add",
                                "remove",
                                "replace"
                              ],
                              "type": "string"
                            },
                            "path": {
                              "description": "Path represents the path in the json patch",
                              "type": "string"
                            },
                            "value": {
                              "description": "Indicates the value of json patch",
                              "x-kubernetes-preserve-unknown-fields": true
                            }
                          },
                          "required": [
                            "operation",
                            "path"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "replicas": {
                        "description": "Replicas overrides the replicas of the workload",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "tweaks"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "workloadTemplate"
          ],
          "type": "object"
        }
      },
      "required": [
        "workload"
      ],
      "type": "object"
    },
    "status": {
      "description": "YurtAppSetStatus defines the observed state of YurtAppSet.",
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the YurtAppSet. The YurtAppSet controller\nuses this field as a collision avoidance mechanism when it needs to\ncreate the name for the newest ControllerRevision.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a YurtAppSet's current state.",
          "items": {
            "description": "YurtAppSetCondition describes current state of a YurtAppSet.",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of in place set condition.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "currentRevision": {
          "description": "CurrentRevision, if not empty, indicates the current version of the YurtAppSet.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this YurtAppSet. It corresponds to the\nYurtAppSet's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "type": "integer"
        },
        "readyWorkloads": {
          "description": "The number of ready workloads.",
          "format": "int32",
          "type": "integer"
        },
        "totalWorkloads": {
          "description": "TotalWorkloads is the most recently observed number of workloads.",
          "format": "int32",
          "type": "integer"
        },
        "updatedWorkloads": {
          "description": "The number of updated workloads.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currentRevision",
        "readyWorkloads",
        "totalWorkloads"
      ],
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "apps.openyurt.io",
      "kind": "YurtAppSet",
      "version": "v1beta1"
    }
  ]
}