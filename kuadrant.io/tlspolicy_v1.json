{
  "description": "TLSPolicy is the Schema for the tlspolicies API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "kuadrant.io/v1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "TLSPolicy"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "TLSPolicySpec defines the desired state of TLSPolicy",
      "properties": {
        "commonName": {
          "description": "CommonName is a common name to be used on the Certificate.\nThe CommonName should have a length of 64 characters or fewer to avoid\ngenerating invalid CSRs.\nThis value is ignored by TLS clients when any subject alt name is set.\nThis is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4",
          "type": "string"
        },
        "duration": {
          "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option\nmay be ignored/overridden by some issuer types. If unset this defaults to\n90 days. Certificate will be renewed either 2/3 through its duration or\n`renewBefore` period before its expiry, whichever is later. Minimum\naccepted duration is 1 hour. Value must be in units accepted by Go\ntime.ParseDuration https://golang.org/pkg/time/#ParseDuration",
          "type": "string"
        },
        "issuerRef": {
          "description": "IssuerRef is a reference to the issuer for this certificate.\nIf the `kind` field is not set, or set to `Issuer`, an Issuer resource\nwith the given name in the same namespace as the Certificate will be used.\nIf the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the\nprovided name will be used.\nThe `name` field in this stanza is required at all times.",
          "properties": {
            "group": {
              "description": "Group of the resource being referred to.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the resource being referred to.",
              "type": "string"
            },
            "name": {
              "description": "Name of the resource being referred to.",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "privateKey": {
          "description": "Options to control private keys used for the Certificate.",
          "properties": {
            "algorithm": {
              "description": "Algorithm is the private key algorithm of the corresponding private key\nfor this certificate.\n\nIf provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.\nIf `algorithm` is specified and `size` is not provided,\nkey size of 2048 will be used for `RSA` key algorithm and\nkey size of 256 will be used for `ECDSA` key algorithm.\nkey size is ignored when using the `Ed25519` key algorithm.",
              "enum": [
                "RSA",
                "ECDSA",
                "Ed25519"
              ],
              "type": "string"
            },
            "encoding": {
              "description": "The private key cryptography standards (PKCS) encoding for this\ncertificate's private key to be encoded in.\n\nIf provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1\nand PKCS#8, respectively.\nDefaults to `PKCS1` if not specified.",
              "enum": [
                "PKCS1",
                "PKCS8"
              ],
              "type": "string"
            },
            "rotationPolicy": {
              "description": "RotationPolicy controls how private keys should be regenerated when a\nre-issuance is being processed.\n\nIf set to `Never`, a private key will only be generated if one does not\nalready exist in the target `spec.secretName`. If one does exist but it\ndoes not have the correct algorithm or size, a warning will be raised\nto await user intervention.\nIf set to `Always`, a private key matching the specified requirements\nwill be generated whenever a re-issuance occurs.\nDefault is `Never` for backward compatibility.",
              "enum": [
                "Never",
                "Always"
              ],
              "type": "string"
            },
            "size": {
              "description": "Size is the key bit size of the corresponding private key for this certificate.\n\nIf `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,\nand will default to `2048` if not specified.\nIf `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,\nand will default to `256` if not specified.\nIf `algorithm` is set to `Ed25519`, Size is ignored.\nNo other values are allowed.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "renewBefore": {
          "description": "How long before the currently issued certificate's expiry\ncert-manager should renew the certificate. The default is 2/3 of the\nissued certificate's duration. Minimum accepted value is 5 minutes.\nValue must be in units accepted by Go time.ParseDuration\nhttps://golang.org/pkg/time/#ParseDuration",
          "type": "string"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the maximum number of CertificateRequest revisions\nthat are maintained in the Certificate's history. Each revision represents\na single `CertificateRequest` created by this Certificate, either when it\nwas created, renewed, or Spec was changed. Revisions will be removed by\noldest first if the number of revisions exceeds this number. If set,\nrevisionHistoryLimit must be a value of `1` or greater. If unset (`nil`),\nrevisions will not be garbage collected. Default value is `nil`.",
          "format": "int32",
          "type": "integer"
        },
        "targetRef": {
          "description": "TargetRef identifies an API object to apply policy to.",
          "properties": {
            "group": {
              "description": "Group is the group of the target resource.",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
              "type": "string"
            },
            "kind": {
              "description": "Kind is kind of the target resource.",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of the target resource.",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            },
            "sectionName": {
              "description": "SectionName is the name of a section within the target resource. When\nunspecified, this targetRef targets the entire resource. In the following\nresources, SectionName is interpreted as the following:\n\n* Gateway: Listener name\n* HTTPRoute: HTTPRouteRule name\n* Service: Port name\n\nIf a SectionName is specified, but does not exist on the targeted object,\nthe Policy must fail to attach, and the policy implementation should record\na `ResolvedRefs` or similar Condition in the Policy's status.",
              "maxLength": 253,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
              "type": "string"
            }
          },
          "required": [
            "group",
            "kind",
            "name"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "Invalid targetRef.group. The only supported value is 'gateway.networking.k8s.io'",
              "rule": "self.group == 'gateway.networking.k8s.io'"
            },
            {
              "message": "Invalid targetRef.kind. The only supported values are 'Gateway'",
              "rule": "self.kind == 'Gateway'"
            }
          ]
        },
        "usages": {
          "description": "Usages is the set of x509 usages that are requested for the certificate.\nDefaults to `digital signature` and `key encipherment` if not specified.",
          "items": {
            "description": "KeyUsage specifies valid usage contexts for keys.\nSee:\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\n\nValid KeyUsage values are as follows:\n\"signing\",\n\"digital signature\",\n\"content commitment\",\n\"key encipherment\",\n\"key agreement\",\n\"data encipherment\",\n\"cert sign\",\n\"crl sign\",\n\"encipher only\",\n\"decipher only\",\n\"any\",\n\"server auth\",\n\"client auth\",\n\"code signing\",\n\"email protection\",\n\"s/mime\",\n\"ipsec end system\",\n\"ipsec tunnel\",\n\"ipsec user\",\n\"timestamping\",\n\"ocsp signing\",\n\"microsoft sgc\",\n\"netscape sgc\"",
            "enum": [
              "signing",
              "digital signature",
              "content commitment",
              "key encipherment",
              "key agreement",
              "data encipherment",
              "cert sign",
              "crl sign",
              "encipher only",
              "decipher only",
              "any",
              "server auth",
              "client auth",
              "code signing",
              "email protection",
              "s/mime",
              "ipsec end system",
              "ipsec tunnel",
              "ipsec user",
              "timestamping",
              "ocsp signing",
              "microsoft sgc",
              "netscape sgc"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "issuerRef",
        "targetRef"
      ],
      "type": "object"
    },
    "status": {
      "description": "TLSPolicyStatus defines the observed state of TLSPolicy",
      "properties": {
        "conditions": {
          "description": "conditions are any conditions associated with the policy\n\nIf configuring the policy fails, the \"Failed\" condition will be set with a\nreason and message describing the cause of the failure.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recently observed generation of the\nTLSPolicy.  When the TLSPolicy is updated, the controller updates the\ncorresponding configuration. If an update fails, that failure is\nrecorded in the status condition",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "kuadrant.io",
      "kind": "TLSPolicy",
      "version": "v1"
    }
  ]
}