{
  "description": "DNSPolicy is the Schema for the dnspolicies API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "kuadrant.io/v1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "DNSPolicy"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "DNSPolicySpec defines the desired state of DNSPolicy",
      "properties": {
        "excludeAddresses": {
          "description": "ExcludeAddresses is a list of addresses (either hostnames, CIDR or IPAddresses) that DNSPolicy should not use as values in the configured DNS provider records. The default is to allow all addresses configured in the Gateway DNSPolicy is targeting",
          "items": {
            "type": "string"
          },
          "maxItems": 20,
          "type": "array"
        },
        "healthCheck": {
          "description": "HealthCheckSpec configures health checks in the DNS provider.\nBy default this health check will be applied to each unique DNS A Record for\nthe listeners assigned to the target gateway",
          "properties": {
            "additionalHeadersRef": {
              "description": "AdditionalHeadersRef refers to a secret that contains extra headers to send in the probe request, this is primarily useful if an authentication\ntoken is required by the endpoint.",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "failureThreshold": {
              "default": 5,
              "description": "FailureThreshold is a limit of consecutive failures that must occur for a host to be considered unhealthy\nDefaults to 5",
              "type": "integer",
              "x-kubernetes-validations": [
                {
                  "message": "Failure threshold must be greater than 0",
                  "rule": "self \u003e 0"
                }
              ]
            },
            "interval": {
              "default": "5m",
              "description": "Interval defines how frequently this probe should execute\nDefaults to 5 minutes",
              "type": "string"
            },
            "path": {
              "description": "Path is the path to append to the host to reach the expected health check.\nMust start with \"?\" or \"/\", contain only valid URL characters and end with alphanumeric char or \"/\". For example \"/\" or \"/healthz\" are common",
              "pattern": "^(?:\\?|\\/)[\\w\\-.~:\\/?#\\[\\]@!$\u0026'()*+,;=]+(?:[a-zA-Z0-9]|\\/){1}$",
              "type": "string"
            },
            "port": {
              "default": 443,
              "description": "Port to connect to the host on. Must be either 80, 443 or 1024-49151\nDefaults to port 443",
              "type": "integer",
              "x-kubernetes-validations": [
                {
                  "message": "Only ports 80, 443, 1024-49151 are allowed",
                  "rule": "self in [80, 443] || (self \u003e= 1024 \u0026\u0026 self \u003c= 49151)"
                }
              ]
            },
            "protocol": {
              "default": "HTTPS",
              "description": "Protocol to use when connecting to the host, valid values are \"HTTP\" or \"HTTPS\"\nDefaults to HTTPS",
              "type": "string",
              "x-kubernetes-validations": [
                {
                  "message": "Only HTTP or HTTPS protocols are allowed",
                  "rule": "self in ['HTTP','HTTPS']"
                }
              ]
            }
          },
          "type": "object"
        },
        "loadBalancing": {
          "properties": {
            "defaultGeo": {
              "description": "defaultGeo specifies if this is the default geo for providers that support setting a default catch all geo endpoint such as Route53.",
              "type": "boolean"
            },
            "geo": {
              "description": "geo value to apply to geo endpoints.\n\nThe values accepted are determined by the target dns provider, please refer to the appropriate docs below.\n\nRoute53: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values-geo.html\nGoogle: https://cloud.google.com/compute/docs/regions-zones\nAzure: https://learn.microsoft.com/en-us/azure/traffic-manager/traffic-manager-geographic-regions",
              "minLength": 2,
              "type": "string"
            },
            "weight": {
              "default": 120,
              "description": "weight value to apply to weighted endpoints.\n\nThe maximum value accepted is determined by the target dns provider, please refer to the appropriate docs below.\n\nRoute53: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-weighted.html\nGoogle: https://cloud.google.com/dns/docs/overview/\nAzure: https://learn.microsoft.com/en-us/azure/traffic-manager/traffic-manager-routing-methods#weighted-traffic-routing-method",
              "type": "integer"
            }
          },
          "required": [
            "defaultGeo",
            "geo",
            "weight"
          ],
          "type": "object"
        },
        "providerRefs": {
          "description": "providerRefs is a list of references to provider secrets. Max is one but intention is to allow this to be more in the future",
          "items": {
            "properties": {
              "name": {
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "maxItems": 1,
          "minItems": 1,
          "type": "array"
        },
        "targetRef": {
          "description": "targetRef identifies an API object to apply policy to.",
          "properties": {
            "group": {
              "description": "Group is the group of the target resource.",
              "maxLength": 253,
              "pattern": "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
              "type": "string"
            },
            "kind": {
              "description": "Kind is kind of the target resource.",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$",
              "type": "string"
            },
            "name": {
              "description": "Name is the name of the target resource.",
              "maxLength": 253,
              "minLength": 1,
              "type": "string"
            },
            "sectionName": {
              "description": "SectionName is the name of a section within the target resource. When\nunspecified, this targetRef targets the entire resource. In the following\nresources, SectionName is interpreted as the following:\n\n* Gateway: Listener name\n* HTTPRoute: HTTPRouteRule name\n* Service: Port name\n\nIf a SectionName is specified, but does not exist on the targeted object,\nthe Policy must fail to attach, and the policy implementation should record\na `ResolvedRefs` or similar Condition in the Policy's status.",
              "maxLength": 253,
              "minLength": 1,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
              "type": "string"
            }
          },
          "required": [
            "group",
            "kind",
            "name"
          ],
          "type": "object",
          "x-kubernetes-validations": [
            {
              "message": "Invalid targetRef.group. The only supported value is 'gateway.networking.k8s.io'",
              "rule": "self.group == 'gateway.networking.k8s.io'"
            },
            {
              "message": "Invalid targetRef.kind. The only supported values are 'Gateway'",
              "rule": "self.kind == 'Gateway'"
            }
          ]
        }
      },
      "required": [
        "providerRefs",
        "targetRef"
      ],
      "type": "object"
    },
    "status": {
      "description": "DNSPolicyStatus defines the observed state of DNSPolicy",
      "properties": {
        "conditions": {
          "description": "conditions are any conditions associated with the policy\n\nIf configuring the policy fails, the \"Failed\" condition will be set with a\nreason and message describing the cause of the failure.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "healthCheck": {
          "properties": {
            "conditions": {
              "items": {
                "description": "Condition contains details for one aspect of the current state of this API Resource.",
                "properties": {
                  "lastTransitionTime": {
                    "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "message": {
                    "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                    "maxLength": 32768,
                    "type": "string"
                  },
                  "observedGeneration": {
                    "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "reason": {
                    "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                    "type": "string"
                  },
                  "status": {
                    "description": "status of the condition, one of True, False, Unknown.",
                    "enum": [
                      "True",
                      "False",
                      "Unknown"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                    "maxLength": 316,
                    "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                    "type": "string"
                  }
                },
                "required": [
                  "lastTransitionTime",
                  "message",
                  "reason",
                  "status",
                  "type"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "probes": {
              "items": {
                "properties": {
                  "conditions": {
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource.",
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                          "maxLength": 32768,
                          "type": "string"
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                          "type": "string"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ],
                          "type": "string"
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "host": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "ipAddress": {
                    "type": "string"
                  },
                  "synced": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "host",
                  "id",
                  "ipAddress"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recently observed generation of the\nDNSPolicy.  When the DNSPolicy is updated, the controller updates the\ncorresponding configuration. If an update fails, that failure is\nrecorded in the status condition",
          "format": "int64",
          "type": "integer"
        },
        "recordConditions": {
          "additionalProperties": {
            "items": {
              "description": "Condition contains details for one aspect of the current state of this API Resource.",
              "properties": {
                "lastTransitionTime": {
                  "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                  "format": "date-time",
                  "type": "string"
                },
                "message": {
                  "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                  "maxLength": 32768,
                  "type": "string"
                },
                "observedGeneration": {
                  "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                  "format": "int64",
                  "minimum": 0,
                  "type": "integer"
                },
                "reason": {
                  "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                  "maxLength": 1024,
                  "minLength": 1,
                  "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                  "type": "string"
                },
                "status": {
                  "description": "status of the condition, one of True, False, Unknown.",
                  "enum": [
                    "True",
                    "False",
                    "Unknown"
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                  "maxLength": 316,
                  "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                  "type": "string"
                }
              },
              "required": [
                "lastTransitionTime",
                "message",
                "reason",
                "status",
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "type": "object"
        },
        "totalRecords": {
          "description": "TotalRecords records the total number of individual DNSRecords managed by this DNSPolicy",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "kuadrant.io",
      "kind": "DNSPolicy",
      "version": "v1"
    }
  ]
}