{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "elemental.cattle.io/v1beta1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "SeedImage"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "properties": {
        "baseImage": {
          "description": "BaseImg the base elemental image used to build the seed image.",
          "type": "string"
        },
        "buildContainer": {
          "description": "BuildContainer settings for a custom container used to generate the\ndownloadable image.",
          "properties": {
            "args": {
              "description": "Args same as corev1.Container.Args",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "command": {
              "description": "Command same as corev1.Container.Command",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "image": {
              "description": "Image container image to run",
              "type": "string"
            },
            "imagePullPolicy": {
              "description": "Args same as corev1.Container.ImagePullPolicy",
              "type": "string"
            },
            "name": {
              "description": "Name of the spawned container",
              "type": "string"
            }
          },
          "type": "object"
        },
        "cleanupAfterMinutes": {
          "default": 60,
          "description": "LifetimeMinutes the time at which the built seed image will be cleaned up.\nIf when the lifetime elapses the built image is being downloaded, the active\ndownload will be completed before removing the built image.\nDefault is 60 minutes, set to 0 to disable.",
          "format": "int32",
          "type": "integer"
        },
        "cloud-config": {
          "description": "CloudConfig contains cloud-config data to be put in the generated iso.",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "registrationRef": {
          "description": "MachineRegistrationRef a reference to the related MachineRegistration.",
          "properties": {
            "apiVersion": {
              "description": "API version of the referent.",
              "type": "string"
            },
            "fieldPath": {
              "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
              "type": "string"
            },
            "kind": {
              "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string"
            },
            "name": {
              "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
              "type": "string"
            },
            "resourceVersion": {
              "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
              "type": "string"
            },
            "uid": {
              "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
              "type": "string"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "retriggerBuild": {
          "description": "RetriggerBuild triggers to build again a cleaned up seed image.",
          "type": "boolean"
        },
        "size": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "string"
            }
          ],
          "default": 6442450944,
          "description": "Size specifies the size of the volume used to store the image.\nDefaults to 6Gi",
          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
          "x-kubernetes-int-or-string": true
        },
        "targetPlatform": {
          "description": "Platform specifies the target platform for the built image. Example: linux/amd64",
          "pattern": "^$|^\\S+\\/\\S+$",
          "type": "string"
        },
        "type": {
          "default": "iso",
          "description": "Type specifies the type of seed image to built.\nValid values are iso|raw\nDefaults to \"iso\"",
          "enum": [
            "iso",
            "raw"
          ],
          "type": "string"
        }
      },
      "required": [
        "registrationRef",
        "type"
      ],
      "type": "object"
    },
    "status": {
      "properties": {
        "checksumURL": {
          "description": "ChecksumURL the URL from which the SeedImage checksum can be downloaded once the image is built.",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions describe the state of the machine registration object.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "downloadToken": {
          "description": "DownloadToken a token to identify the seed image to download.",
          "type": "string"
        },
        "downloadURL": {
          "description": "DownloadURL the URL from which the SeedImage can be downloaded once built.",
          "type": "string"
        },
        "state": {
          "description": "State reflect the state of the seed image build process.",
          "enum": [
            "Initialized",
            "Started",
            "Completed",
            "Failed",
            "NotStarted"
          ],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "elemental.cattle.io",
      "kind": "SeedImage",
      "version": "v1beta1"
    }
  ]
}