{
  "description": "CloneSet is the Schema for the clonesets API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "apps.kruise.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "CloneSet"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "CloneSetSpec defines the desired state of CloneSet",
      "properties": {
        "lifecycle": {
          "description": "Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.",
          "properties": {
            "inPlaceUpdate": {
              "description": "InPlaceUpdate is the hook before Pod to update and after Pod has been updated.",
              "properties": {
                "finalizersHandler": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "labelsHandler": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "markPodNotReady": {
                  "description": "MarkPodNotReady = true means:\n- Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state.\n- Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state.\nCurrently, MarkPodNotReady only takes effect on InPlaceUpdate \u0026 PreDelete hook.\nDefault to false.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "preDelete": {
              "description": "PreDelete is the hook before Pod to be deleted.",
              "properties": {
                "finalizersHandler": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "labelsHandler": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "markPodNotReady": {
                  "description": "MarkPodNotReady = true means:\n- Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state.\n- Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state.\nCurrently, MarkPodNotReady only takes effect on InPlaceUpdate \u0026 PreDelete hook.\nDefault to false.",
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "preNormal": {
              "description": "PreNormal is the hook after Pod to be created and ready to be Normal.",
              "properties": {
                "finalizersHandler": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "labelsHandler": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "markPodNotReady": {
                  "description": "MarkPodNotReady = true means:\n- Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state.\n- Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state.\nCurrently, MarkPodNotReady only takes effect on InPlaceUpdate \u0026 PreDelete hook.\nDefault to false.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing, for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the desired number of replicas of the given Template.\nThese are replicas in the sense that they are instantiations of the\nsame Template.\nIf unspecified, defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "RevisionHistoryLimit is the maximum number of revisions that will\nbe maintained in the CloneSet's revision history. The revision history\nconsists of all revisions not represented by a currently applied\nCloneSetSpec version. The default value is 10.",
          "format": "int32",
          "type": "integer"
        },
        "scaleStrategy": {
          "description": "ScaleStrategy indicates the ScaleStrategy that will be employed to\ncreate and delete Pods in the CloneSet.",
          "properties": {
            "disablePVCReuse": {
              "description": "Indicate if cloneSet will reuse already existed pvc to\nrebuild a new pod",
              "type": "boolean"
            },
            "maxUnavailable": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The maximum number of pods that can be unavailable for scaled pods.\nThis field can control the changes rate of replicas for CloneSet so as to minimize the impact for users' service.\nThe scale will fail if the number of unavailable pods were greater than this MaxUnavailable at scaling up.\nMaxUnavailable works only when scaling up.",
              "x-kubernetes-int-or-string": true
            },
            "podsToDelete": {
              "description": "PodsToDelete is the names of Pod should be deleted.\nNote that this list will be truncated for non-existing pod names.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count.\nIt must match the pod template's labels.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "template": {
          "description": "Template describes the pods that will be created.",
          "x-kubernetes-preserve-unknown-fields": true
        },
        "updateStrategy": {
          "description": "UpdateStrategy indicates the UpdateStrategy that will be employed to\nupdate Pods in the CloneSet when a revision is made to Template.",
          "properties": {
            "inPlaceUpdateStrategy": {
              "description": "InPlaceUpdateStrategy contains strategies for in-place update.",
              "properties": {
                "gracePeriodSeconds": {
                  "description": "GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec\nwhen in-place update a Pod.",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "maxSurge": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The maximum number of pods that can be scheduled above the desired replicas during update or specified delete.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding up.\nDefaults to 0.",
              "x-kubernetes-int-or-string": true
            },
            "maxUnavailable": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The maximum number of pods that can be unavailable during update or scale.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding up by default.\nWhen maxSurge \u003e 0, absolute number is calculated from percentage by rounding down.\nDefaults to 20%.",
              "x-kubernetes-int-or-string": true
            },
            "partition": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "Partition is the desired number of pods in old revisions.\nValue can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).\nAbsolute number is calculated from percentage by rounding up by default.\nIt means when partition is set during pods updating, (replicas - partition value) number of pods will be updated.\nDefault value is 0.",
              "x-kubernetes-int-or-string": true
            },
            "paused": {
              "description": "Paused indicates that the CloneSet is paused.\nDefault value is false",
              "type": "boolean"
            },
            "priorityStrategy": {
              "description": "Priorities are the rules for calculating the priority of updating pods.\nEach pod to be updated, will pass through these terms and get a sum of weights.",
              "properties": {
                "orderPriority": {
                  "description": "Order priority terms, pods will be sorted by the value of orderedKey.\nFor example:\n```\norderPriority:\n- orderedKey: key1\n- orderedKey: key2\n```\nFirst, all pods which have key1 in labels will be sorted by the value of key1.\nThen, the left pods which have no key1 but have key2 in labels will be sorted by\nthe value of key2 and put behind those pods have key1.",
                  "items": {
                    "description": "UpdatePriorityOrderTerm defines order priority.",
                    "properties": {
                      "orderedKey": {
                        "description": "Calculate priority by value of this key.\nValues of this key, will be sorted by GetInt(val). GetInt method will find the last int in value,\nsuch as getting 5 in value '5', getting 10 in value 'sts-10'.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "orderedKey"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "weightPriority": {
                  "description": "Weight priority terms, pods will be sorted by the sum of all terms weight.",
                  "items": {
                    "description": "UpdatePriorityWeightTerm defines weight priority.",
                    "properties": {
                      "matchSelector": {
                        "description": "MatchSelector is used to select by pod's labels.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": "object"
                          }
                        },
                        "type": "object",
                        "x-kubernetes-map-type": "atomic"
                      },
                      "weight": {
                        "description": "Weight associated with matching the corresponding matchExpressions, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "matchSelector",
                      "weight"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "scatterStrategy": {
              "description": "ScatterStrategy defines the scatter rules to make pods been scattered when update.\nThis will avoid pods with the same key-value to be updated in one batch.\n- Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them.\n- If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.",
              "items": {
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "type": {
              "description": "Type indicates the type of the CloneSetUpdateStrategy.\nDefault is ReCreate.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "volumeClaimTemplates": {
          "description": "VolumeClaimTemplates is a list of claims that pods are allowed to reference.\nNote that PVC will be deleted when its pod has been deleted.",
          "x-kubernetes-preserve-unknown-fields": true
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "status": {
      "description": "CloneSetStatus defines the observed state of CloneSet",
      "properties": {
        "availableReplicas": {
          "description": "AvailableReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition for at least minReadySeconds.",
          "format": "int32",
          "type": "integer"
        },
        "collisionCount": {
          "description": "CollisionCount is the count of hash collisions for the CloneSet. The CloneSet controller\nuses this field as a collision avoidance mechanism when it needs to create the name for the\nnewest ControllerRevision.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Conditions represents the latest available observations of a CloneSet's current state.",
          "items": {
            "description": "CloneSetCondition describes the state of a CloneSet at a certain point.",
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": "string"
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of CloneSet condition.",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the current revision version of the CloneSet.",
          "type": "string"
        },
        "expectedUpdatedReplicas": {
          "description": "ExpectedUpdatedReplicas is the number of Pods that should be updated by CloneSet controller.\nThis field is calculated via Replicas - Partition.",
          "format": "int32",
          "type": "integer"
        },
        "labelSelector": {
          "description": "LabelSelector is label selectors for query over pods that should match the replica count used by HPA.",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this CloneSet. It corresponds to the\nCloneSet's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "ReadyReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Replicas is the number of Pods created by the CloneSet controller.",
          "format": "int32",
          "type": "integer"
        },
        "updateRevision": {
          "description": "UpdateRevision, if not empty, indicates the latest revision of the CloneSet.",
          "type": "string"
        },
        "updatedAvailableReplicas": {
          "description": "UpdatedAvailableReplicas is the number of Pods created by the CloneSet controller from the CloneSet version\nindicated by updateRevision and have a Ready Condition for at least minReadySeconds.",
          "format": "int32",
          "type": "integer"
        },
        "updatedReadyReplicas": {
          "description": "UpdatedReadyReplicas is the number of Pods created by the CloneSet controller from the CloneSet version\nindicated by updateRevision and have a Ready Condition.",
          "format": "int32",
          "type": "integer"
        },
        "updatedReplicas": {
          "description": "UpdatedReplicas is the number of Pods created by the CloneSet controller from the CloneSet version\nindicated by updateRevision.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "availableReplicas",
        "readyReplicas",
        "replicas",
        "updatedReadyReplicas",
        "updatedReplicas"
      ],
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "apps.kruise.io",
      "kind": "CloneSet",
      "version": "v1alpha1"
    }
  ]
}