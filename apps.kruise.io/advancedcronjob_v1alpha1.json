{
  "description": "AdvancedCronJob is the Schema for the advancedcronjobs API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "apps.kruise.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "AdvancedCronJob"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "AdvancedCronJobSpec defines the desired state of AdvancedCronJob",
      "properties": {
        "concurrencyPolicy": {
          "description": "Specifies how to treat concurrent executions of a Job.\nValid values are:\n- \"Allow\" (default): allows CronJobs to run concurrently;\n- \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet;\n- \"Replace\": cancels currently running job and replaces it with a new one",
          "enum": [
            "Allow",
            "Forbid",
            "Replace"
          ],
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "The number of failed finished jobs to retain.\nThis is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Paused will pause the cron job.",
          "type": "boolean"
        },
        "schedule": {
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "minLength": 0,
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled\ntime for any reason.  Missed jobs executions will be counted as failed ones.",
          "format": "int64",
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "description": "The number of successful finished jobs to retain.\nThis is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "template": {
          "description": "Specifies the job that will be created when executing a CronJob.",
          "properties": {
            "broadcastJobTemplate": {
              "description": "Specifies the broadcastjob that will be created when executing a BroadcastCronJob.",
              "properties": {
                "metadata": {
                  "description": "Standard object's metadata of the jobs created from this template.",
                  "type": "object"
                },
                "spec": {
                  "description": "Specification of the desired behavior of the broadcastjob.",
                  "properties": {
                    "completionPolicy": {
                      "description": "CompletionPolicy indicates the completion policy of the job.\nDefault is Always CompletionPolicyType.",
                      "properties": {
                        "activeDeadlineSeconds": {
                          "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active\nbefore the system tries to terminate it; value must be positive integer.\nOnly works for Always type.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "ttlSecondsAfterFinished": {
                          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished\nexecution (either Complete or Failed). If this field is set,\nttlSecondsAfterFinished after the Job finishes, it is eligible to be\nautomatically deleted. When the Job is being deleted, its lifecycle\nguarantees (e.g. finalizers) will be honored. If this field is unset,\nthe Job won't be automatically deleted. If this field is set to zero,\nthe Job becomes eligible to be deleted immediately after it finishes.\nThis field is alpha-level and is only honored by servers that enable the\nTTLAfterFinished feature.\nOnly works for Always type",
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": {
                          "description": "Type indicates the type of the CompletionPolicy.\nDefault is Always.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "failurePolicy": {
                      "description": "FailurePolicy indicates the behavior of the job, when failed pod is found.",
                      "properties": {
                        "restartLimit": {
                          "description": "RestartLimit specifies the number of retries before marking the pod failed.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": {
                          "description": "Type indicates the type of FailurePolicyType.\nDefault is FailurePolicyTypeFailFast.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "parallelism": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Parallelism specifies the maximum desired number of pods the job should\nrun at any given time. The actual number of pods running in steady state will\nbe less than this number when the work left to do is less than max parallelism.\nNot setting this value means no limit.",
                      "x-kubernetes-int-or-string": true
                    },
                    "paused": {
                      "description": "Paused will pause the job.",
                      "type": "boolean"
                    },
                    "template": {
                      "description": "Template describes the pod that will be created when executing a job.",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "required": [
                    "template"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "jobTemplate": {
              "description": "Specifies the job that will be created when executing a CronJob.",
              "x-kubernetes-preserve-unknown-fields": true
            }
          },
          "type": "object"
        },
        "timeZone": {
          "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\nIf not specified, this will default to the time zone of the kruise-controller-manager process.",
          "type": "string"
        }
      },
      "required": [
        "schedule",
        "template"
      ],
      "type": "object"
    },
    "status": {
      "description": "AdvancedCronJobStatus defines the observed state of AdvancedCronJob",
      "properties": {
        "active": {
          "description": "A list of pointers to currently running jobs.",
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                "type": "string"
              },
              "kind": {
                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": "string"
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": "string"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic"
          },
          "type": "array"
        },
        "lastScheduleTime": {
          "description": "Information when was the last time the job was successfully scheduled.",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "apps.kruise.io",
      "kind": "AdvancedCronJob",
      "version": "v1alpha1"
    }
  ]
}