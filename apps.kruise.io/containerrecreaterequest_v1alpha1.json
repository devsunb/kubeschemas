{
  "description": "ContainerRecreateRequest is the Schema for the containerrecreaterequests API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "apps.kruise.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "ContainerRecreateRequest"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "ContainerRecreateRequestSpec defines the desired state of ContainerRecreateRequest",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "ActiveDeadlineSeconds is the deadline duration of this ContainerRecreateRequest.",
          "format": "int64",
          "type": "integer"
        },
        "containers": {
          "description": "Containers contains the containers that need to recreate in the Pod.",
          "items": {
            "description": "ContainerRecreateRequestContainer defines the container that need to recreate.",
            "properties": {
              "name": {
                "description": "Name of the container that need to recreate.\nIt must be existing in the real pod.Spec.Containers.",
                "type": "string"
              },
              "ports": {
                "description": "Ports is synced from the real container in Pod spec during this ContainerRecreateRequest creating.\nPopulated by the system.\nRead-only.",
                "items": {
                  "description": "ContainerPort represents a network port in a single container.",
                  "properties": {
                    "containerPort": {
                      "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "hostIP": {
                      "description": "What host IP to bind the external port to.",
                      "type": "string"
                    },
                    "hostPort": {
                      "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.",
                      "type": "string"
                    },
                    "protocol": {
                      "default": "TCP",
                      "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".",
                      "type": "string"
                    }
                  },
                  "required": [
                    "containerPort"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "preStop": {
                "description": "PreStop is synced from the real container in Pod spec during this ContainerRecreateRequest creating.\nPopulated by the system.\nRead-only.",
                "properties": {
                  "exec": {
                    "description": "One and only one of the following should be specified.\nExec specifies the action to take.",
                    "properties": {
                      "command": {
                        "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "properties": {
                      "host": {
                        "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.",
                        "type": "string"
                      },
                      "httpHeaders": {
                        "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                        "items": {
                          "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                          "properties": {
                            "name": {
                              "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The header field value",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "value"
                          ],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "path": {
                        "description": "Path to access on the HTTP server.",
                        "type": "string"
                      },
                      "port": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                        "x-kubernetes-int-or-string": true
                      },
                      "scheme": {
                        "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "port"
                    ],
                    "type": "object"
                  },
                  "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\nTCP hooks not yet supported\nTODO: implement a realistic TCP lifecycle hook",
                    "properties": {
                      "host": {
                        "description": "Optional: Host name to connect to, defaults to the pod IP.",
                        "type": "string"
                      },
                      "port": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          }
                        ],
                        "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "required": [
                      "port"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "statusContext": {
                "description": "StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating.\nPopulated by the system.\nRead-only.",
                "properties": {
                  "containerID": {
                    "description": "Container's ID in the format 'docker://\u003ccontainer_id\u003e'.",
                    "type": "string"
                  },
                  "restartCount": {
                    "description": "The number of times the container has been restarted, currently based on\nthe number of dead containers that have not yet been removed.\nNote that this is calculated from dead containers. But those containers are subject to\ngarbage collection. This value will get capped at 5 by GC.",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "containerID",
                  "restartCount"
                ],
                "type": "object"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "podName": {
          "description": "PodName is name of the Pod that owns the recreated containers.",
          "type": "string"
        },
        "strategy": {
          "description": "Strategy defines strategies for containers recreation.",
          "properties": {
            "failurePolicy": {
              "description": "FailurePolicy decides whether to continue if one container fails to recreate",
              "type": "string"
            },
            "forceRecreate": {
              "description": "ForceRecreate indicates whether to force kill the container even if the previous container is starting.",
              "type": "boolean"
            },
            "minStartedSeconds": {
              "description": "Minimum number of seconds for which a newly created container should be started and ready\nwithout any of its container crashing, for it to be considered Succeeded.\nDefaults to 0 (container will be considered Succeeded as soon as it is started and ready)",
              "format": "int32",
              "type": "integer"
            },
            "orderedRecreate": {
              "description": "OrderedRecreate indicates whether to recreate the next container only if the previous one has recreated completely.",
              "type": "boolean"
            },
            "terminationGracePeriodSeconds": {
              "description": "TerminationGracePeriodSeconds is the optional duration in seconds to wait the container terminating gracefully.\nValue must be non-negative integer. The value zero indicates delete immediately.\nIf this value is nil, we will use pod.Spec.TerminationGracePeriodSeconds as default value.",
              "format": "int64",
              "type": "integer"
            },
            "unreadyGracePeriodSeconds": {
              "description": "UnreadyGracePeriodSeconds is the optional duration in seconds to mark Pod as not ready over this duration before\nexecuting preStop hook and stopping the container.",
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "ttlSecondsAfterFinished": {
          "description": "TTLSecondsAfterFinished is the TTL duration after this ContainerRecreateRequest has completed.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "containers",
        "podName"
      ],
      "type": "object"
    },
    "status": {
      "description": "ContainerRecreateRequestStatus defines the observed state of ContainerRecreateRequest",
      "properties": {
        "completionTime": {
          "description": "Represents time when the ContainerRecreateRequest was completed. It is not guaranteed to\nbe set in happens-before order across separate operations.\nIt is represented in RFC3339 form and is in UTC.",
          "format": "date-time",
          "type": "string"
        },
        "containerRecreateStates": {
          "description": "ContainerRecreateStates contains the recreation states of the containers.",
          "items": {
            "description": "ContainerRecreateRequestContainerRecreateState contains the recreation state of the container.",
            "properties": {
              "isKilled": {
                "description": "Containers are killed by kruise daemon",
                "type": "boolean"
              },
              "message": {
                "description": "A human readable message indicating details about this state.",
                "type": "string"
              },
              "name": {
                "description": "Name of the container.",
                "type": "string"
              },
              "phase": {
                "description": "Phase indicates the recreation phase of the container.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "phase"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A human readable message indicating details about this ContainerRecreateRequest.",
          "type": "string"
        },
        "phase": {
          "description": "Phase of this ContainerRecreateRequest, e.g. Pending, Recreating, Completed",
          "type": "string"
        }
      },
      "required": [
        "phase"
      ],
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "apps.kruise.io",
      "kind": "ContainerRecreateRequest",
      "version": "v1alpha1"
    }
  ]
}