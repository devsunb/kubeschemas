{
  "description": "NodeImage is the Schema for the nodeimages API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "apps.kruise.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "NodeImage"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "NodeImageSpec defines the desired state of NodeImage",
      "properties": {
        "images": {
          "additionalProperties": {
            "description": "ImageSpec defines the pulling spec of an image",
            "properties": {
              "pullSecrets": {
                "description": "PullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image.\nIf specified, these secrets will be passed to individual puller implementations for them to use.  For example,\nin the case of docker, only DockerConfig type secrets are honored.",
                "items": {
                  "description": "ReferenceObject comprises a resource name, with a mandatory namespace,\nrendered as \"\u003cnamespace\u003e/\u003cname\u003e\".",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "namespace": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "sandboxConfig": {
                "description": "SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs",
                "properties": {
                  "annotations": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  },
                  "labels": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "tags": {
                "description": "Tags is a list of versions of this image",
                "items": {
                  "description": "ImageTagSpec defines the pulling spec of an image tag",
                  "properties": {
                    "createdAt": {
                      "description": "Specifies the create time of this tag",
                      "format": "date-time",
                      "type": "string"
                    },
                    "imagePullPolicy": {
                      "description": "Image pull policy.\nOne of Always, IfNotPresent. Defaults to IfNotPresent.",
                      "type": "string"
                    },
                    "ownerReferences": {
                      "description": "List of objects depended by this object. If this image is managed by a controller,\nthen an entry in this list will point to this controller.",
                      "items": {
                        "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
                        "properties": {
                          "apiVersion": {
                            "description": "API version of the referent.",
                            "type": "string"
                          },
                          "fieldPath": {
                            "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                            "type": "string"
                          },
                          "namespace": {
                            "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                            "type": "string"
                          },
                          "resourceVersion": {
                            "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "x-kubernetes-map-type": "atomic"
                      },
                      "type": "array"
                    },
                    "pullPolicy": {
                      "description": "PullPolicy is an optional field to set parameters of the pulling task. If not specified,\nthe system will use the default values.",
                      "properties": {
                        "activeDeadlineSeconds": {
                          "description": "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the task may be active\nbefore the system tries to terminate it; value must be positive integer.\nif not specified, the system will never terminate it.",
                          "format": "int64",
                          "type": "integer"
                        },
                        "backoffLimit": {
                          "description": "Specifies the number of retries before marking the pulling task failed.\nDefaults to 3",
                          "format": "int32",
                          "type": "integer"
                        },
                        "timeoutSeconds": {
                          "description": "Specifies the timeout of the pulling task.\nDefaults to 600",
                          "format": "int32",
                          "type": "integer"
                        },
                        "ttlSecondsAfterFinished": {
                          "description": "TTLSecondsAfterFinished limits the lifetime of a pulling task that has finished execution (either Complete or Failed).\nIf this field is set, ttlSecondsAfterFinished after the task finishes, it is eligible to be automatically deleted.\nIf this field is unset, the task won't be automatically deleted.\nIf this field is set to zero, the task becomes eligible to be deleted immediately after it finishes.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "tag": {
                      "description": "Specifies the image tag",
                      "type": "string"
                    },
                    "version": {
                      "description": "An opaque value that represents the internal version of this tag that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\n\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "tag"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "tags"
            ],
            "type": "object"
          },
          "description": "Specifies images to be pulled on this node\nIt can not be more than 256 for each NodeImage",
          "type": "object"
        }
      },
      "type": "object"
    },
    "status": {
      "description": "NodeImageStatus defines the observed state of NodeImage",
      "properties": {
        "desired": {
          "description": "The desired number of pulling tasks, this is typically equal to the number of images in spec.",
          "format": "int32",
          "type": "integer"
        },
        "failed": {
          "description": "The number of pulling tasks  which reached phase Failed.",
          "format": "int32",
          "type": "integer"
        },
        "firstSyncStatus": {
          "description": "The first of all job has finished on this node. When a node is added to the cluster, we want to know\nthe time when the node's image pulling is completed, and use it to trigger the operation of the upper system.",
          "properties": {
            "message": {
              "type": "string"
            },
            "status": {
              "description": "SyncStatusPhase defines the node status",
              "type": "string"
            },
            "syncAt": {
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "imageStatuses": {
          "additionalProperties": {
            "description": "ImageStatus defines the pulling status of an image",
            "properties": {
              "tags": {
                "description": "Represents statuses of pulling tasks on this node",
                "items": {
                  "description": "ImageTagStatus defines the pulling status of an image tag",
                  "properties": {
                    "completionTime": {
                      "description": "Represents time when the pulling task was completed. It is not guaranteed to\nbe set in happens-before order across separate operations.\nIt is represented in RFC3339 form and is in UTC.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "imageID": {
                      "description": "Represents the ID of this image.",
                      "type": "string"
                    },
                    "message": {
                      "description": "Represents the summary information of this node",
                      "type": "string"
                    },
                    "phase": {
                      "description": "Represents the image pulling task phase.",
                      "type": "string"
                    },
                    "progress": {
                      "description": "Represents the pulling progress of this tag, which is between 0-100. There is no guarantee\nof monotonic consistency, and it may be a rollback due to retry during pulling.",
                      "format": "int32",
                      "type": "integer"
                    },
                    "startTime": {
                      "description": "Represents time when the pulling task was acknowledged by the image puller.\nIt is not guaranteed to be set in happens-before order across separate operations.\nIt is represented in RFC3339 form and is in UTC.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Represents the image tag.",
                      "type": "string"
                    },
                    "version": {
                      "description": "Represents the internal version of this tag that the daemon handled.",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "phase",
                    "tag"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "tags"
            ],
            "type": "object"
          },
          "description": "all statuses of active image pulling tasks",
          "type": "object"
        },
        "pulling": {
          "description": "The number of pulling tasks which are not finished.",
          "format": "int32",
          "type": "integer"
        },
        "succeeded": {
          "description": "The number of pulling tasks which reached phase Succeeded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "desired"
      ],
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "apps.kruise.io",
      "kind": "NodeImage",
      "version": "v1alpha1"
    }
  ]
}