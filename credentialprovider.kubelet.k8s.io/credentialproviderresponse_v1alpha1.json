{
  "description": "CredentialProviderResponse holds credentials that the kubelet should use for the specified image provided in the original request. Kubelet will read the response from the plugin via stdout. This response should be set to the same apiVersion as CredentialProviderRequest.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "credentialprovider.kubelet.k8s.io/v1alpha1"
      ],
      "type": "string"
    },
    "auth": {
      "additionalProperties": {
        "$ref": "../credentialprovider.kubelet.k8s.io/authconfig_v1alpha1.json",
        "default": {}
      },
      "description": "auth is a map containing authentication information passed into the kubelet. Each key is a match image string (more on this below). The corresponding authConfig value should be valid for all images that match against this key. A plugin should set this field to null if no valid credentials can be returned for the requested image.\n\nEach key in the map is a pattern which can optionally contain a port and a path. Globs can be used in the domain, but not in the port or the path. Globs are supported as subdomains like '*.k8s.io' or 'k8s.*.io', and top-level-domains such as 'k8s.*'. Matching partial subdomains like 'app*.k8s.io' is also supported. Each glob can only match a single subdomain segment, so *.io does not match *.k8s.io.\n\nThe kubelet will match images against the key when all of the below are true: - Both contain the same number of domain parts and each part matches. - The URL path of an imageMatch must be a prefix of the target image URL path. - If the imageMatch contains a port, then the port must match in the image as well.\n\nWhen multiple keys are returned, the kubelet will traverse all keys in reverse order so that: - longer keys come before shorter keys with the same prefix - non-wildcard keys come before wildcard keys with the same prefix.\n\nFor any given match, the kubelet will attempt an image pull with the provided credentials, stopping after the first successfully authenticated pull.\n\nExample keys:\n  - 123456789.dkr.ecr.us-east-1.amazonaws.com\n  - *.azurecr.io\n  - gcr.io\n  - *.*.registry.io\n  - registry.io:8080/path",
      "type": "object"
    },
    "cacheDuration": {
      "$ref": "../meta.apis.pkg.apimachinery.k8s.io/duration_v1.json",
      "description": "cacheDuration indicates the duration the provided credentials should be cached for. The kubelet will use this field to set the in-memory cache duration for credentials in the AuthConfig. If null, the kubelet will use defaultCacheDuration provided in CredentialProviderConfig. If set to 0, the kubelet will not cache the provided AuthConfig."
    },
    "cacheKeyType": {
      "default": "",
      "description": "cacheKeyType indiciates the type of caching key to use based on the image provided in the request. There are three valid values for the cache key type: Image, Registry, and Global. If an invalid value is specified, the response will NOT be used by the kubelet.",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "CredentialProviderResponse"
      ],
      "type": "string"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object"
}